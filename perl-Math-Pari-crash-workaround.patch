Math::Pari doesn't work properly with Data::Dumper[1], so try at least to
avoid crash when trying to DESTROY something restored from dump
(most likely to happen on 64-bit machines, when Data::Dumper uses string
instead of int for pointer values which don't fit in 32 bits).

[1] Data::Dumper returns something like
bless( do{\(my $o = POINTER_VAL)}, 'Math::Pari' );
where POINTER_VAL is just value of pointer to already existing Pari
object (which may be destroyed later!).

--- Math-Pari-2.030523/Pari.xs.orig	2022-04-12 11:03:02.000000000 +0200
+++ Math-Pari-2.030523/Pari.xs	2022-05-30 21:20:23.166166331 +0200
@@ -1437,6 +1437,13 @@ moveoffstack_newer_than(SV* sv)
   SV* nextsv;
   long ret=0;
   
+  /* check if it exists on stack to avoid crash */
+  for (sv1 = PariStack; sv1 != sv; sv1 = nextsv) {
+    nextsv = (SV *) SvPVX(sv1);
+    if((char*)nextsv == GENfirstOnStack)
+      return -1; /* not on stack! */
+  }
+
   for (sv1 = PariStack; sv1 != sv; sv1 = nextsv) {
     ret++;
     SV_OAVMA_switch(nextsv, sv1, GENmovedOffStack);	/* Mark as moved off stack. */
@@ -4570,7 +4577,7 @@ DESTROY(rv)
 	 long oldavma;			 /* The value of avma on the entry
 					  * to function having the SV as
 					  * argument. */
-	 long howmany;
+	 long howmany = 0;
 	 SV_OAVMA_PARISTACK_get(sv, oldavma, ostack);
 	 oldavma += myPARI_bot;
 #if 1
@@ -4603,6 +4610,7 @@ DESTROY(rv)
 	     /* Now fall through: */
 /* case (IV)GENfirstOnStack: */
 	     /* Now sv is the newest one on stack. */
+	     if (howmany >= 0) {
 	     onStack_dec;
 	     perlavma = oldavma;
 	     if (oldavma > sentinel) {
@@ -4611,7 +4619,9 @@ DESTROY(rv)
 		 avma = oldavma;	/* Mark the space on stack as free. */
 	     }
 	     PariStack = (SV*)ostack; /* The same on the Perl/PARI side. */
+	     }
 	 }
+	 if (howmany >= 0)
 	 SVnum_dec;
      }
 
